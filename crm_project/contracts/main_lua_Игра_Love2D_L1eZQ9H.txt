-- main.lua
-- Игра Love2D: сетка 9x9 с буквами, перемещение с A*, составление слов, проверка локально и онлайн

local CELL_SIZE = 64
local GRID_SIZE = 9
local WINDOW_WIDTH = CELL_SIZE * GRID_SIZE
local WINDOW_HEIGHT = CELL_SIZE * GRID_SIZE + 100

local alphabet = {}
for c = 65, 90 do -- A-Z
    table.insert(alphabet, string.char(c))
end

local gameState = "menu"
local score = 0

local occupied = {} -- occupied[x][y] = piece or nil
local pieces = {} -- {x, y, letter, anim}

local selectedPiece = nil
local movePath = nil
local moveProgress = 0

local removalQueue = {}
local additionQueue = {}

local blinkTimer = 0
local blinkInterval = 0.5

local font

-- Минимальный локальный словарь для примера
local localDictionary = {
    ["CAT"] = true,
    ["DOG"] = true,
    ["LOVE"] = true,
    ["GAME"] = true,
    ["WORD"] = true,
    ["HELLO"] = true,
    ["WORLD"] = true,
    -- Добавьте свои слова
}

-- Инициализация сетки
local function inGrid(x,y) return x>=1 and x<=GRID_SIZE and y>=1 and y<=GRID_SIZE end

local function initGrid()
    occupied = {}
    for x=1,GRID_SIZE do
        occupied[x] = {}
        for y=1,GRID_SIZE do
            occupied[x][y] = nil
        end
    end
    pieces = {}
end

local function createPiece(x,y,letter)
    local piece = {
        x = x,
        y = y,
        letter = letter,
        anim = {
            appearing = true,
            appearTimer = 0,
            disappearTimer = 0,
            posX = (x-1)*CELL_SIZE + CELL_SIZE/2,
            posY = (y-1)*CELL_SIZE + CELL_SIZE/2,
        },
        blink = false,
    }
    table.insert(pieces, piece)
    occupied[x][y] = piece
    return piece
end

local function removePiece(piece)
    occupied[piece.x][piece.y] = nil
    for i,p in ipairs(pieces) do
        if p == piece then
            table.remove(pieces,i)
            break
        end
    end
end

local function drawPiece(piece)
    local cx = (piece.x-1)*CELL_SIZE + CELL_SIZE/2
    local cy = (piece.y-1)*CELL_SIZE + CELL_SIZE/2

    local scale = 1
    if piece.anim.appearing then
        scale = math.min(1, piece.anim.appearTimer / 0.3)
    elseif piece.anim.disappearTimer > 0 then
        scale = math.max(0, 1 - piece.anim.disappearTimer / 0.3)
    end

    local posX = piece.anim.posX or cx
    local posY = piece.anim.posY or cy

    love.graphics.push()
    love.graphics.translate(posX, posY)
    love.graphics.scale(scale, scale)

    if piece == selectedPiece and piece.blink then
        love.graphics.setColor(1,1,0)
    else
        love.graphics.setColor(1,1,1)
    end

    love.graphics.setFont(font)
    love.graphics.printf(piece.letter, -CELL_SIZE/4, -CELL_SIZE/2, CELL_SIZE/2, "center")

    love.graphics.pop()
end

local function drawGrid()
    love.graphics.setColor(0.7,0.7,0.7)
    for i=0,GRID_SIZE do
        love.graphics.line(i*CELL_SIZE,0,i*CELL_SIZE,GRID_SIZE*CELL_SIZE)
        love.graphics.line(0,i*CELL_SIZE,GRID_SIZE*CELL_SIZE,i*CELL_SIZE)
    end
end

-- A* поиск (аналогично предыдущему примеру)
local function heuristic(a,b)
    return math.abs(a.x-b.x)+math.abs(a.y-b.y)
end

local function neighbors(node)
    local result = {}
    local dirs = {{1,0},{-1,0},{0,1},{0,-1}}
    for _,d in ipairs(dirs) do
        local nx, ny = node.x+d[1], node.y+d[2]
        if inGrid(nx,ny) and not occupied[nx][ny] then
            table.insert(result,{x=nx,y=ny})
        end
    end
    return result
end

local function nodesEqual(a,b) return a.x==b.x and a.y==b.y end

local function reconstructPath(cameFrom,current)
    local totalPath = {current}
    while cameFrom[current] do
        current = cameFrom[current]
        table.insert(totalPath,1,current)
    end
    return totalPath
end

local function aStar(startX,startY,goalX,goalY)
    local startNode = {x=startX,y=startY}
    local goalNode = {x=goalX,y=goalY}
    local openSet = {[startNode]=true}
    local cameFrom = {}

    local gScore = {}
    local fScore = {}

    local function key(n) return n.x..","..n.y end

    gScore[key(startNode)] = 0
    fScore[key(startNode)] = heuristic(startNode,goalNode)

    local openList = {startNode}

    while #openList>0 do
        table.sort(openList,function(a,b)
            return (fScore[key(a)] or math.huge) < (fScore[key(b)] or math.huge)
        end)
        local current = table.remove(openList,1)
        openSet[current] = nil

        if nodesEqual(current,goalNode) then
            return reconstructPath(cameFrom,current)
        end

        for _,neighbor in ipairs(neighbors(current)) do
            local tentative_gScore = (gScore[key(current)] or math.huge) + 1
            if tentative_gScore < (gScore[key(neighbor)] or math.huge) then
                cameFrom[neighbor] = current
                gScore[key(neighbor)] = tentative_gScore
                fScore[key(neighbor)] = tentative_gScore + heuristic(neighbor,goalNode)
                if not openSet[neighbor] then
                    table.insert(openList,neighbor)
                    openSet[neighbor] = true
                end
            end
        end
    end
    return nil
end

-- Функция для поиска слов в сетке (горизонталь, вертикаль, диагонали)
-- Возвращает список списков фигур, которые составляют слова длиной >=3
local function findWords()
    local wordsFound = {}
    local directions = {
        {1,0}, {0,1}, {1,1}, {1,-1}
    }

    -- Проверка слова в строке фигур
    local function checkWord(line)
        if #line < 3 then return end
        local word = ""
        for _,p in ipairs(line) do
            word = word .. p.letter
        end
        -- Проверяем локально и онлайн (асинхронно)
        if localDictionary[word] or checkWordOnline(word) then
            table.insert(wordsFound,line)
        end
    end

    for _,piece in ipairs(pieces) do
        for _,dir in ipairs(directions) do
            local line = {piece}
            local nx, ny = piece.x + dir[1], piece.y + dir[2]
            while inGrid(nx, ny) and occupied[nx][ny] do
                table.insert(line, occupied[nx][ny])
                nx = nx + dir[1]
                ny = ny + dir[2]
            end
            checkWord(line)
        end
    end

    return wordsFound
end

-- Заглушка проверки слова онлайн (можно реализовать запрос к API)
function checkWordOnline(word)
    -- Здесь можно реализовать HTTP-запрос к словарю (например, словарь Oxford, Merriam-Webster или бесплатный API)
    -- Для демонстрации всегда возвращаем false (т.к. в Love2D сложно делать сетевые запросы без дополнительных библиотек)
    return false
end

-- Добавление новых случайных букв
local function addRandomPieces(count)
    local freeCells = {}
    for x=1,GRID_SIZE do
        for y=1,GRID_SIZE do
            if not occupied[x][y] then
                table.insert(freeCells,{x=x,y=y})
            end
        end
    end
    if #freeCells == 0 then return end
    for i=1,count do
        if #freeCells == 0 then break end
        local idx = love.math.random(1,#freeCells)
        local cell = table.remove(freeCells,idx)
        local letter = alphabet[love.math.random(#alphabet)]
        local piece = createPiece(cell.x,cell.y,letter)
        piece.anim.appearing = true
        piece.anim.appearTimer = 0
        table.insert(additionQueue,piece)
    end
end

-- Инициализация игры
local function startGame()
    initGrid()
    pieces = {}
    selectedPiece = nil
    removalQueue = {}
    additionQueue = {}
    score = 0
    addRandomPieces(5)
end

-- Обработка клика по клетке
local function cellAtPixel(x,y)
    local cx = math.floor(x / CELL_SIZE) + 1
    local cy = math.floor(y / CELL_SIZE) + 1
    if inGrid(cx,cy) then return cx, cy end
    return nil,nil
end

-- Добавление следа (можно реализовать по желанию)
local pawPrints = {}
local function addPawPrint(x,y)
    table.insert(pawPrints, {x=x,y=y,timer=1,alpha=1})
end

-- LOVE2D callbacks

function love.load()
    love.window.setMode(WINDOW_WIDTH, WINDOW_HEIGHT)
    love.window.setTitle("Word Grid Game")
    font = love.graphics.newFont(36)
    love.graphics.setFont(font)
    startGame()
end

function love.update(dt)
    if gameState == "menu" then
        blinkTimer = blinkTimer + dt
        if blinkTimer > blinkInterval then
            blinkTimer = blinkTimer - blinkInterval
        end
        return
    end

    if selectedPiece then
        blinkTimer = blinkTimer + dt
        if blinkTimer > blinkInterval then
            blinkTimer = blinkTimer - blinkInterval
            selectedPiece.blink = not selectedPiece.blink
        end
    end

    if #removalQueue > 0 then
        local piece = removalQueue[1]
        piece.anim.disappearTimer = piece.anim.disappearTimer + dt
        if piece.anim.disappearTimer >= 0.3 then
            removePiece(piece)
            table.remove(removalQueue,1)
        end
        return
    end

    if #additionQueue > 0 then
        local piece = additionQueue[1]
        piece.anim.appearTimer = piece.anim.appearTimer + dt
        if piece.anim.appearTimer >= 0.3 then
            piece.anim.appearing = false
            table.remove(additionQueue,1)
        end
        return
    end

    if movePath ~= nil then
        local pathLen = #movePath
        moveProgress = moveProgress + dt * 8
        if moveProgress >= pathLen - 1 then
            local lastCell = movePath[pathLen]
            occupied[selectedPiece.x][selectedPiece.y] = nil
            selectedPiece.x = lastCell.x
            selectedPiece.y = lastCell.y
            occupied[selectedPiece.x][selectedPiece.y] = selectedPiece
            selectedPiece.anim.posX = (selectedPiece.x-1)*CELL_SIZE + CELL_SIZE/2
            selectedPiece.anim.posY = (selectedPiece.y-1)*CELL_SIZE + CELL_SIZE/2

            for i=2,pathLen do
                local c = movePath[i]
                addPawPrint(c.x,c.y)
            end

            movePath = nil
            moveProgress = 0

            -- Поиск слов
            local words = findWords()
            if #words > 0 then
                -- Удаляем все найденные слова (с анимацией)
                for _,wordLine in ipairs(words) do
                    for _,p in ipairs(wordLine) do
                        if not removalQueue[p] then
                            table.insert(removalQueue,p)
                            p.anim.disappearTimer = 0
                        end
                    end
                end
                -- Начисляем очки (по 10 за букву)
                local totalLetters = 0
                for _,wordLine in ipairs(words) do
                    totalLetters = totalLetters + #wordLine
                end
                score = score + totalLetters * 10
                selectedPiece = nil
            else
                addRandomPieces(3)
                selectedPiece = nil
            end

            return
        else
            local i = math.floor(moveProgress) + 1
            local frac = moveProgress % 1
            local c1 = movePath[i]
            local c2 = movePath[i+1]
            selectedPiece.anim.posX = ((c2.x - c1.x)*frac + c1.x -1)*CELL_SIZE + CELL_SIZE/2
            selectedPiece.anim.posY = ((c2.y - c1.y)*frac + c1.y -1)*CELL_SIZE + CELL_SIZE/2
            return
        end
    end

    for i=#pawPrints,1,-1 do
        local p = pawPrints[i]
        p.timer = p.timer - dt
        p.alpha = p.timer
        if p.timer <= 0 then
            table.remove(pawPrints,i)
        end
    end
end

function love.draw()
    love.graphics.clear(0.15,0.15,0.15)

    if gameState == "menu" then
        love.graphics.setColor(1,1,1)
        love.graphics.printf("Word Grid Game",0,WINDOW_HEIGHT/3,WINDOW_WIDTH,"center")
        local yPlay = WINDOW_HEIGHT/2
        local yExit = yPlay + 50

        if blinkTimer < blinkInterval/2 then
            love.graphics.setColor(0.8,0.8,0.2)
        else
            love.graphics.setColor(1,1,1)
        end
        love.graphics.rectangle("line", WINDOW_WIDTH/2-80,yPlay,160,40,8,8)
        love.graphics.printf("Play", WINDOW_WIDTH/2-80,yPlay+10,160,"center")

        love.graphics.setColor(1,1,1)
        love.graphics.rectangle("line", WINDOW_WIDTH/2-80,yExit,160,40,8,8)
        love.graphics.printf("Exit", WINDOW_WIDTH/2-80,yExit+10,160,"center")
        return
    end

    drawGrid()

    for _,p in ipairs(pawPrints) do
        love.graphics.setColor(1,1,1,p.alpha*0.5)
        local px = (p.x-1)*CELL_SIZE + CELL_SIZE/2
        local py = (p.y-1)*CELL_SIZE + CELL_SIZE/2
        love.graphics.circle("fill", px, py, CELL_SIZE/4)
    end

    for _,p in ipairs(pieces) do
        drawPiece(p)
    end

    love.graphics.setColor(1,1,1)
    love.graphics.rectangle("fill",0,GRID_SIZE*CELL_SIZE,WINDOW_WIDTH,100)
    love.graphics.setColor(0,0,0)
    love.graphics.printf("Score: "..score,10,GRID_SIZE*CELL_SIZE+35,WINDOW_WIDTH,"left")
end

function love.mousepressed(x,y,button)
    if button ~= 1 then return end

    if gameState == "menu" then
        local yPlay = WINDOW_HEIGHT/2
        local yExit = yPlay + 50
        if x >= WINDOW_WIDTH/2-80 and x <= WINDOW_WIDTH/2+80 then
            if y >= yPlay and y <= yPlay+40 then
                gameState = "playing"
                startGame()
            elseif y >= yExit and y <= yExit+40 then
                love.event.quit()
            end
        end
        return
    end

    if y > GRID_SIZE*CELL_SIZE then return end

    local cx, cy = cellAtPixel(x,y)
    if not cx or not cy then return end

    local clickedPiece = occupied[cx][cy]

    if selectedPiece and not movePath then
        if not clickedPiece then
            local path = aStar(selectedPiece.x, selectedPiece.y, cx, cy)
            if path then
                movePath = path
                moveProgress = 0
            else
                selectedPiece = nil
            end
        elseif clickedPiece == selectedPiece then
            selectedPiece = nil
        else
            selectedPiece = clickedPiece
        end
    else
        if clickedPiece then
            selectedPiece = clickedPiece
        else
            selectedPiece = nil
        end
    end
end

